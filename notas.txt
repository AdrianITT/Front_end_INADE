    
def get_factura_relacion_x(request, factura_idR, factura_idA, related):
    """
    Vista para crear una factura con relación a otra (nota de crédito, sustitución, etc.)
    Compatible con CFDI tipo E y otros tipos (I, P, etc.)
    """

    # --- Obtención de facturas base ---
    factura = get_object_or_404(
        Factura.objects.select_related(
            'cotizacion__cliente__empresa__organizacion__RegimenFiscal',
            'cotizacion__cliente__empresa__regimenFiscal',
            'cotizacion__cliente__empresa__organizacion__infoSistema',
            'tipoCfdi',
            'formaPago',
            'metodoPago',
            'cotizacion__iva',
            'cotizacion__tipoMoneda',
        ),
        pk=factura_idA
    )
    facturaR = get_object_or_404(Factura, pk=factura_idR)

    factura_facturama = FacturaFacturama.objects.filter(factura=factura_idR).first()
    uuid_facturama = factura_facturama.uuid if factura_facturama else None

    cotizacion   = factura.cotizacion
    cliente      = cotizacion.cliente
    empresa      = cliente.empresa
    organizacion = empresa.organizacion

    # --- RFC del certificado ---
    cert = CertificadoSelloDigital.objects.filter(Organizacion=organizacion).first()
    organizacion_rfc = cert.rfc if cert else ''

    # --- Tipo de cambio ---
    tipo_cambio = (
        organizacion.infoSistema.tipoCambioDolar
        if cotizacion.tipoMoneda.id == 2
        else Decimal('1')
    )

    # --- Fecha actual en zona horaria de Tijuana ---
    tijuana_tz = pytz.timezone("America/Tijuana")
    today = datetime.now(tijuana_tz).date()
    hora_fija = time(0, 0, 0)
    fecha_iso = datetime.combine(today, hora_fija).isoformat()

    regimen_fiscal = organizacion.RegimenFiscal
    nameid = "2" if factura.tipoCfdi.codigo == "E" else "1"

    # --- Base del CFDI ---
    facturamulti = {
        "NameId": str(nameid),
        "LogoUrl": f"https://test.simplaxi.com{organizacion.logo.url if organizacion.logo else ''}",
        "Currency": cotizacion.tipoMoneda.codigo,
        "Folio": factura.numero,
        "CfdiType": factura.tipoCfdi.codigo,
        "PaymentForm": factura.formaPago.codigo,
        "PaymentMethod": factura.metodoPago.codigo,
        "OrderNumber": factura.ordenCompra,
        "ExpeditionPlace": organizacion.codigoPostal,
        "Date": fecha_iso,
        "Exportation": "01",
        "CurrencyExchangeRate": float(tipo_cambio) if tipo_cambio != 1 else None,
        "Receiver": {
            "Rfc": empresa.rfc,
            "CfdiUse": getattr(empresa, 'UsoCfdi').codigo if hasattr(empresa, 'UsoCfdi') and empresa.UsoCfdi else '',
            "Name": empresa.nombre,
            "FiscalRegime": empresa.regimenFiscal.codigo if empresa.regimenFiscal else '',
            "TaxZipCode": empresa.codigoPostal,
        },
        "Issuer": {
            "FiscalRegime": regimen_fiscal.codigo,
            "Rfc": organizacion_rfc,
            "Name": organizacion.nombre,
        },
        "Items": [],
        "Observations": factura.notas,
    }

    # --- Serie y relaciones solo si NO es tipo E ---
    if factura.tipoCfdi.codigo != "E":
        facturamulti["Serie"] = "FAC"

    # --- Relaciones (si aplica) ---
    if factura_idR != 0 and uuid_facturama:
        facturamulti["Relations"] = {
            "Type": str(related),
            "Cfdis": [{"Uuid": str(uuid_facturama)}],
        }

    # --- Construcción de Items ---
    pct_factura = Decimal(factura.porcentaje or 0)
    factor_factura = (Decimal(100) - pct_factura) / Decimal(100)
    rounding = Decimal('0.000001')

    fs_qs = FacturaServicio.objects.select_related(
        'servicio__claveCfdi',
        'servicio__unidadCfdi',
        'servicio__metodos'
    ).filter(factura=factura)

    for fs in fs_qs:
        servicio = fs.servicio
        cantidad = Decimal(fs.cantidad)
        precio_desc = (Decimal(fs.precio) * factor_factura).quantize(rounding, ROUND_HALF_UP)
        subtotal_linea = (precio_desc * cantidad).quantize(rounding, ROUND_HALF_UP)
        pct_cot = Decimal(cotizacion.descuento or 0) / Decimal(100)
        valor_desc = (subtotal_linea * pct_cot).quantize(rounding, ROUND_HALF_UP)
        subc_desc = (subtotal_linea - valor_desc).quantize(rounding, ROUND_HALF_UP)
        pct_iva = (Decimal(cotizacion.iva.porcentaje or 0) / Decimal(1)).quantize(rounding, ROUND_HALF_UP)
        iva_val = (subc_desc * pct_iva).quantize(rounding, ROUND_HALF_UP)
        total_linea = (subc_desc + iva_val).quantize(rounding, ROUND_HALF_UP)

        # Código de producto dinámico según tipo CFDI
        productco = "84111506" if factura.tipoCfdi.codigo == "E" else servicio.claveCfdi.codigo
        unit_code = "ACT" if factura.tipoCfdi.codigo == "E" else servicio.unidadCfdi.codigo
        unit_name = "Servicio" if factura.tipoCfdi.codigo == "E" else servicio.unidadCfdi.descripcion if hasattr(servicio.unidadCfdi, 'descripcion') else "Servicio"

        facturamulti["Items"].append({
            "IdProduct": None,
            "ProductCode": str(productco),
            "Description": fs.servicio.nombreServicio,
            "Unit": str(unit_name),
            "UnitCode": str(unit_code),
            "UnitPrice": float(precio_desc),
            "Quantity": float(cantidad),
            "Subtotal": float(subtotal_linea),
            "Discount": float(valor_desc),
            "TaxObject": "02",
            "Taxes": [{
                "Total": float(iva_val),
                "Name": "IVA",
                "Base": float(subc_desc),
                "Rate": float(pct_iva),
                "IsRetention": False
            }],
            "Total": float(total_linea),
        })

    # --- Validaciones previas ---
    if str(factura_idA) == str(factura_idR):
        return JsonResponse({"error": "factura_idA y factura_idR no pueden ser iguales."}, status=400)

    rt = RelationTypes.objects.filter(codigo=str(related)).first()
    if not rt:
        return JsonResponse({"error": f"RelationTypes '{related}' no existe."}, status=400)

    response = crear_cfdi_api(facturamulti)
    comp = response.get("Complement", {}) or {}
    uuid_new = (comp.get("TaxStamp") or {}).get("Uuid")

    credit_note.facturaidA = str(uuid_new)
    credit_note.save(update_fields=['facturaidA'])

    if response.get("Id") and uuid_new:
        FacturaFacturama.objects.create(
            uuid=uuid_new,
            idfactura=response["Id"],
            factura_id=factura.id
        )
        return JsonResponse({"success": True, "cfdi": response})

    return JsonResponse({"error": "Error creando CFDI", "response": response}, status=400)

